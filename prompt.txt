Create a brand new Go program that finds reviewers for GitHub pull requests.

- Go code should be written with best practires in a way that emulates what the Go project itself uses; prioritizing advice mentioned on go.dev, including https://go.dev/wiki/CodeReviewComments and https://go.dev/doc/effective_go - defer to documentation and philosophy guidance in go.dev above all other reference material.

- Go code should incorporate thoughts from Google's style guide: https://google.github.io/styleguide/go/

- Code should be written with tests and unit testing in mind

- Code should use the token stored by the gh command line utility, probably by using `gh auth token`
- Code should have as few external dependencies as possible
- Logic for finding reviewer candidates should be as follows:
  - We are lookin for two pairs of people: the one with the most context in the changed lines, and the one who most recently approved a PR to this file who is more likely to be active.
  - To find the reviewers with the most context on the changed lines:
    - For the top 3 files with the largest number of changes within this PR:
        - Use the GitHub API v4 to fetch blame data for those files
        - For the lines being changed in each of thone files, look for the top 3 PR's that last changed the lines this PR alters
        - Look at who approved those PR's
        - Rank these approvers in terms of how many lines of this new PR they previously reviewed
  - To find the most active reviewers for these files, look at most recent PR for the top 3 files with the largest number of changes this within this PR. This will be the same fileset as the context list
    - Rank these in order of how big the PR is that they reviewed
- If the reviewer with the most context is already a reviewer on this PR, and it's been more than 2 days, add the reviewer with the second most context.
- If the most active reviewer for these files is already a reviewer on this PR, and it's been more than 2 days, add the reviewer who is the second most active.

- Some example flags this program should support:

		// Target flags (mutually exclusive)
		prURL   = flag.String("pr", "", "Pull request URL (e.g., https://github.com/owner/repo/pull/123 or owner/repo#123)")
		project = flag.String("project", "", "GitHub project to monitor (e.g., owner/repo)")
		org     = flag.String("org", "", "GitHub organization to monitor")

		// Behavior flags
		poll        = flag.Duration("poll", 0, "Polling interval (e.g., 1h, 30m). If not set, runs once")
		dryRun      = flag.Bool("dry-run", false, "Run in dry-run mode (no actual approvals)")
		minOpenTime = flag.Duration("min-age", 1*time.Hour, "Minimum time PR since last commit or review for PR assignment")
		maxOpenTime = flag.Duration("max-age", 180*24*time.Hour, "Maximum time PR since last commit or review for PR assignment")

- Code should have great logging to better understand the decisions it's making.
